"""
Ferramentas utilit√°rias MCP para o servidor DOU.

Este m√≥dulo implementa ferramentas auxiliares como configura√ß√£o,
estat√≠sticas e informa√ß√µes sobre o sistema DOU.
"""

import logging
import time
from datetime import date
from mcp.server.fastmcp import FastMCP

from ..auth.inlabs_auth import get_auth_instance
from ..config.settings import get_config
from ..models.dou_models import DOUCredentials, DOUSection


logger = logging.getLogger(__name__)


def register_utility_tools(mcp: FastMCP) -> None:
    """Registra as ferramentas utilit√°rias no servidor MCP."""
    
    @mcp.tool()
    async def configure_credentials(email: str, password: str) -> str:
        """
        Configura credenciais para acesso ao sistema INLABS.
        
        Args:
            email: Email de login no INLABS
            password: Senha do INLABS
        """
        try:
            # Cria novas credenciais
            credentials = DOUCredentials(email=email, password=password)
            
            # Testa autentica√ß√£o
            auth = get_auth_instance(credentials)
            result = await auth.test_connection()
            
            if result.success:
                return f"‚úÖ Credenciais configuradas com sucesso!\n\nüìß Email: {email}\nüîí Senha: {'*' * len(password)}\n‚è±Ô∏è Tempo de teste: {result.execution_time_ms:.2f}ms"
            else:
                return f"‚ùå Falha na configura√ß√£o das credenciais\n\nüîç Erro: {result.error}\n‚è±Ô∏è Tempo de teste: {result.execution_time_ms:.2f}ms"
                
        except Exception as e:
            logger.error(f"Erro ao configurar credenciais: {e}")
            return f"‚ùå Erro ao configurar credenciais: {str(e)}"
    
    @mcp.tool()
    async def test_connection() -> str:
        """
        Testa a conex√£o com o sistema INLABS usando as credenciais configuradas.
        """
        try:
            auth = get_auth_instance()
            result = await auth.test_connection()
            
            if result.success:
                config = get_config()
                data = result.data or {}
                return (
                    f"‚úÖ Conex√£o com INLABS estabelecida com sucesso!\n\n"
                    f"üìß Email: {config.inlabs_email}\n"
                    f"üîó Autenticado: {data.get('authenticated', False)}\n"
                    f"üç™ Cookie de sess√£o: {data.get('session_cookie', False)}\n"
                    f"‚è±Ô∏è Tempo de teste: {result.execution_time_ms:.2f}ms"
                )
            else:
                return (
                    f"‚ùå Falha na conex√£o com INLABS\n\n"
                    f"üîç Erro: {result.error}\n"
                    f"‚è±Ô∏è Tempo de teste: {result.execution_time_ms:.2f}ms\n\n"
                    f"üí° Dica: Verifique suas credenciais usando configure_credentials"
                )
                
        except Exception as e:
            logger.error(f"Erro no teste de conex√£o: {e}")
            return f"‚ùå Erro no teste de conex√£o: {str(e)}"
    
    @mcp.tool()
    async def list_available_sections() -> str:
        """
        Lista todas as se√ß√µes dispon√≠veis do DOU com descri√ß√µes.
        """
        sections_info = [
            ("DO1", "Se√ß√£o 1", "Atos normativos de interesse geral (leis, decretos, portarias)"),
            ("DO1E", "Se√ß√£o 1 Extra", "Edi√ß√£o extra da Se√ß√£o 1"),
            ("DO2", "Se√ß√£o 2", "Atos de pessoal relativos aos servidores p√∫blicos"),
            ("DO2E", "Se√ß√£o 2 Extra", "Edi√ß√£o extra da Se√ß√£o 2"),
            ("DO3", "Se√ß√£o 3", "Extratos contratuais, editais e licita√ß√µes"),
            ("DO3E", "Se√ß√£o 3 Extra", "Edi√ß√£o extra da Se√ß√£o 3")
        ]
        
        result = "üìö Se√ß√µes Dispon√≠veis do Di√°rio Oficial da Uni√£o\n\n"
        
        for code, name, description in sections_info:
            result += f"üîπ **{code}** - {name}\n   {description}\n\n"
        
        result += (
            "üìã **Formatos de Arquivo:**\n"
            "‚Ä¢ XML: Formato estruturado para processamento autom√°tico\n"
            "‚Ä¢ PDF: Vers√£o oficial certificada para visualiza√ß√£o\n\n"
            "üí° **Exemplo de uso:**\n"
            '‚Ä¢ XML: download_dou_xml("2024-09-17", "DO1 DO2")\n'
            '‚Ä¢ PDF: download_dou_pdf("2024-09-17", "do1 do2")'
        )
        
        return result
    
    @mcp.tool()
    async def get_server_info() -> str:
        """
        Obt√©m informa√ß√µes sobre o servidor MCP DOU.
        """
        config = get_config()
        
        return (
            f"üñ•Ô∏è **Servidor MCP DOU - Informa√ß√µes**\n\n"
            f"üìõ Nome: {config.server_name}\n"
            f"üî¢ Vers√£o: {config.server_version}\n"
            f"üìÅ Diret√≥rio de cache: {config.cache_dir}\n"
            f"üíæ Tamanho m√°ximo do cache: {config.max_cache_size} arquivos\n"
            f"‚è∞ TTL do cache: {config.cache_ttl_hours} horas\n"
            f"üîÑ Tentativas de retry: {config.retry_attempts}\n"
            f"‚è±Ô∏è Timeout de download: {config.download_timeout}s\n"
            f"üéØ Downloads simult√¢neos: {config.max_concurrent_downloads}\n\n"
            f"üìä **Status:**\n"
            f"‚Ä¢ Data atual: {date.today()}\n"
            f"‚Ä¢ Servidor ativo: ‚úÖ\n"
            f"‚Ä¢ Sistema INLABS: Conectado"
        )
    
    @mcp.tool()
    async def get_dou_statistics() -> str:
        """
        Obt√©m estat√≠sticas sobre o cache local e uso do sistema.
        """
        # TODO: Implementar estat√≠sticas reais do cache
        config = get_config()
        
        return (
            f"üìà **Estat√≠sticas do Sistema DOU**\n\n"
            f"üìÅ Diret√≥rio de cache: {config.cache_dir}\n"
            f"üìä Funcionalidade em desenvolvimento...\n\n"
            f"üîÑ Em breve:\n"
            f"‚Ä¢ Total de arquivos em cache\n"
            f"‚Ä¢ Espa√ßo utilizado em disco\n"
            f"‚Ä¢ Arquivos mais acessados\n"
            f"‚Ä¢ Estat√≠sticas por se√ß√£o\n"
            f"‚Ä¢ Hist√≥rico de downloads"
        )
    
    @mcp.tool()
    async def validate_date_range(start_date: str, end_date: str) -> str:
        """
        Valida um intervalo de datas para consultas DOU.
        
        Args:
            start_date: Data inicial (YYYY-MM-DD)
            end_date: Data final (YYYY-MM-DD)
        """
        try:
            from datetime import datetime, timedelta
            
            start = datetime.strptime(start_date, "%Y-%m-%d").date()
            end = datetime.strptime(end_date, "%Y-%m-%d").date()
            today = date.today()
            
            # Valida√ß√µes
            if start > end:
                return "‚ùå Data inicial n√£o pode ser posterior √† data final"
            
            if end > today:
                return f"‚ö†Ô∏è Data final ({end}) √© posterior √† data atual ({today})"
            
            # Calcula diferen√ßa
            diff = (end - start).days
            
            if diff > 365:
                return f"‚ö†Ô∏è Intervalo muito longo ({diff} dias). Recomendado: m√°ximo 365 dias"
            
            # Verifica disponibilidade (DOU digital come√ßou em 2017)
            min_date = datetime(2017, 1, 1).date()
            if start < min_date:
                return f"‚ö†Ô∏è Data inicial anterior ao in√≠cio do DOU digital ({min_date})"
            
            return (
                f"‚úÖ **Intervalo de datas v√°lido**\n\n"
                f"üìÖ Per√≠odo: {start} at√© {end}\n"
                f"üìä Total de dias: {diff + 1}\n"
                f"üìà Estimativa de arquivos (3 se√ß√µes): {(diff + 1) * 3}\n\n"
                f"üí° Dica: Use intervalos menores para downloads mais r√°pidos"
            )
            
        except ValueError:
            return "‚ùå Formato de data inv√°lido. Use YYYY-MM-DD (ex: 2024-09-17)"
        except Exception as e:
            return f"‚ùå Erro na valida√ß√£o: {str(e)}"