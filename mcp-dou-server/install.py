#!/usr/bin/env python3
"""
Script de instala√ß√£o e configura√ß√£o do MCP DOU Server.

Este script automatiza a instala√ß√£o das depend√™ncias e configura√ß√£o inicial.
"""

import os
import sys
import subprocess
from pathlib import Path
import shutil


def check_python_version():
    """Verifica se a vers√£o do Python √© adequada."""
    if sys.version_info < (3, 10):
        print("‚ùå Python 3.10 ou superior √© necess√°rio")
        print(f"   Vers√£o atual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")
    return True


def install_dependencies():
    """Instala as depend√™ncias do projeto."""
    print("üì¶ Instalando depend√™ncias...")
    
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ])
        print("‚úÖ Depend√™ncias instaladas com sucesso")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao instalar depend√™ncias")
        return False


def setup_environment():
    """Configura o ambiente (cria .env baseado no exemplo)."""
    env_example = Path(".env.example")
    env_file = Path(".env")
    
    if env_file.exists():
        print("‚ö†Ô∏è  Arquivo .env j√° existe")
        response = input("   Deseja sobrescrever? (s/N): ")
        if response.lower() != 's':
            print("   Mantendo arquivo .env existente")
            return True
    
    if env_example.exists():
        shutil.copy(env_example, env_file)
        print("‚úÖ Arquivo .env criado baseado no exemplo")
        print("‚ö†Ô∏è  IMPORTANTE: Configure suas credenciais INLABS no arquivo .env")
        return True
    else:
        print("‚ùå Arquivo .env.example n√£o encontrado")
        return False


def create_directories():
    """Cria diret√≥rios necess√°rios."""
    directories = ["cache", "logs", "downloads"]
    
    for dir_name in directories:
        dir_path = Path(dir_name)
        if not dir_path.exists():
            dir_path.mkdir(parents=True, exist_ok=True)
            print(f"üìÅ Diret√≥rio '{dir_name}' criado")
    
    print("‚úÖ Diret√≥rios criados")
    return True


def test_installation():
    """Testa se a instala√ß√£o foi bem-sucedida."""
    print("üß™ Testando instala√ß√£o...")
    
    try:
        # Tenta importar os m√≥dulos principais
        from src.config.settings import get_config
        from src.models.dou_models import DOUSection
        from src.auth.inlabs_auth import INLABSAuth
        
        print("‚úÖ M√≥dulos importados com sucesso")
        
        # Testa configura√ß√£o
        config = get_config()
        print(f"‚úÖ Configura√ß√£o carregada - Servidor: {config.server_name}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False


def show_next_steps():
    """Mostra os pr√≥ximos passos ap√≥s a instala√ß√£o."""
    print("\n" + "="*60)
    print("üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("="*60)
    print("\nüìã PR√ìXIMOS PASSOS:\n")
    
    print("1. üîê Configure suas credenciais INLABS:")
    print("   ‚Ä¢ Edite o arquivo .env")
    print("   ‚Ä¢ Insira seu email e senha do sistema INLABS\n")
    
    print("2. üß™ Teste o servidor:")
    print("   ‚Ä¢ python run_server.py")
    print("   ‚Ä¢ ou: python -m src.server\n")
    
    print("3. ü§ñ Configure Claude Desktop:")
    print("   ‚Ä¢ Localize: claude_desktop_config.json")
    print("   ‚Ä¢ Adicione a configura√ß√£o do servidor DOU")
    print("   ‚Ä¢ Veja exemplos/ para configura√ß√£o completa\n")
    
    print("4. ‚ú® Teste com Claude:")
    print('   ‚Ä¢ "Liste as se√ß√µes do DOU"')
    print('   ‚Ä¢ "Baixe os XMLs do DOU de hoje"')
    print('   ‚Ä¢ "Teste a conex√£o com INLABS"\n')
    
    print("üìö Documenta√ß√£o: README.md")
    print("üêõ Issues: https://github.com/atejap05/mcp-dou-server/issues")
    print("\n" + "="*60)


def main():
    """Fun√ß√£o principal do instalador."""
    print("üöÄ MCP DOU Server - Instalador")
    print("="*50)
    
    # Verifica Python
    if not check_python_version():
        sys.exit(1)
    
    # Instala depend√™ncias
    if not install_dependencies():
        sys.exit(1)
    
    # Configura ambiente
    if not setup_environment():
        sys.exit(1)
    
    # Cria diret√≥rios
    if not create_directories():
        sys.exit(1)
    
    # Testa instala√ß√£o
    if not test_installation():
        print("‚ö†Ô∏è  Instala√ß√£o pode ter problemas, mas prosseguindo...")
    
    # Mostra pr√≥ximos passos
    show_next_steps()


if __name__ == "__main__":
    main()